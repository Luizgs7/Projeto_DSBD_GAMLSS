geom_histogram( color="white", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("steelblue3", "tomato")) +
theme_classic() +
labs(fill="")+
theme(legend.position="bottom")
hg2 <- ggplot(df, aes(x=MA, fill=Class)) +
geom_histogram( color="white", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("steelblue3", "tomato")) +
theme_classic() +
labs(fill="")+
theme(legend.position="bottom")
hg3 <- ggplot(df, aes(x=BC, fill=Class)) +
geom_histogram( color="white", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("steelblue3", "tomato")) +
theme_classic() +
labs(fill="") +
theme(legend.position="bottom")
# Organiza os gráfica um ao lado do outro
grid.arrange(hg1, hg2, hg3, ncol=3)
bp1 <- ggplot(data = df, aes(x = Class, y = CT, fill = Class)) +
geom_boxplot(width = .3, outlier.colour = "red", alpha=0.6)+
scale_fill_manual(values=c("steelblue3", "tomato"))+
theme_classic(base_size = 16)+
theme(legend.position="bottom")
bp2 <- ggplot(data = df, aes(x = Class, y = MA, fill = Class)) +
geom_boxplot(width = .3, outlier.colour = "red", alpha=0.6)+
scale_fill_manual(values=c("steelblue3", "tomato"))+
theme_classic(base_size = 16)+
theme(legend.position="bottom")
bp3 <- ggplot(data = df, aes(x = Class, y = BC, fill = Class)) +
geom_boxplot(width = .3, outlier.colour = "red", alpha=0.6)+
scale_fill_manual(values=c("steelblue3", "tomato"))+
theme_classic(base_size = 16)+
theme(legend.position="bottom")
# Organiza os gráfica um ao lado do outro
grid.arrange(bp1, bp2, bp3, ncol=3)
cor <-  cor(df[,-4])
corrplot(cor, method="color", type='lower', addCoef.col = "black")
# Transformação da variável texto para numérica
df <- df %>%
mutate(Class = case_when(Class == "benign" ~ 0,
Class != "benign" ~ 1))
set.seed(1909)
indice_treino = createDataPartition(y=df$Class, p=0.75, list=FALSE)
treino = df[indice_treino, ]
teste = df[-indice_treino, ]
# Fit do modelo com os dados de treino
m1 <- glm(Class ~ .,data = treino, family = binomial(link='logit'))
summary(m1)
# Armazenando os coeficientes encontrados
CT_estimate <- as.character(round(m1$coefficients[2],3))
MA_estimate <- as.character(round(m1$coefficients[3],3))
BC_estimate <- as.character(round(m1$coefficients[4],3))
CT_estimate_exp <- as.character(round(exp(m1$coefficients[2]),3))
MA_estimate_exp <- as.character(round(exp(m1$coefficients[3]),3))
BC_estimate_exp <- as.character(round(exp(m1$coefficients[4]),3))
# Função para predict de diferentes threshoulds e treino/teste
pred_m1 <- function(p, tipo){
if (tipo == "treino"){
pred_treino_prob <- predict(m1, newdata = treino[,-4], type = 'response')
pred_treino <- ifelse(pred_treino_prob > p, 1, 0)
cfm_treino <- confusionMatrix(data=factor(pred_treino), reference = factor(treino[,4])) #mode = "prec_recall"
return(cfm_treino)
}
if (tipo == "teste"){
pred_teste_prob <- predict(m1, newdata = teste[,-4], type = 'response')
pred_teste <- ifelse(pred_teste_prob > p, 1, 0)
cfm_teste <- confusionMatrix(data=factor(pred_teste), reference = factor(teste[,4])) #mode = "prec_recall"
return(cfm_teste)
}
}
# Função para imprimir tabela estilizado no documento html
metrics_m1 <- function(p, tipo) {
metricas <- data.frame(Acurácia = round(pred_m1(p=p,tipo=tipo)$overall["Accuracy"],4),
Sensibilidade = round(pred_m1(p=p,tipo=tipo)$byClass["Sensitivity"],4),
Especificidade = round(pred_m1(p=p,tipo=tipo)$byClass["Specificity"],4),
row.names = NULL) %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
return(metricas)
}
pred_m1(0.3,"treino")
predict(m1, newdata = treino[,-4], type = 'response')
treino
treino$Class
treino_pred <- predict(m1, newdata = treino[,-4], type = 'response')
r2 <- roc(treino$Class, treino_pred)
i <- coords(roc = r2, x = "best", ret = c("threshold"), best.method = "youden", best.weights=c(2, 0.5))
ii <- coords(roc = r2, x = "best", ret = c("threshold"), best.method = "youden", best.weights=c(2, 0.2))
iii <- coords(roc = r2, x = "best", ret = c("threshold"), best.method = "youden", best.weights=c(10, 0.5))
iv <- coords(roc = r2, x = "best", ret = c("threshold"), best.method = "youden", best.weights=c(2, 0.2))
data.frame(cenário = c("i", "ii", "iii", "iv"), p = c(i[[1]], ii[[1]], iii[[1]], iv[[1]]))
#r2 <- roc(basepred$Class, predicoes_pred)
predicoes_pred
teste_pred <- predict(m1, newdata = teste[,-4], type = 'response')
r2 <- roc(teste$Class, teste_pred)
i <- coords(roc = r2, x = "best", ret = c("threshold"), best.method = "youden", best.weights=c(2, 0.5))
ii <- coords(roc = r2, x = "best", ret = c("threshold"), best.method = "youden", best.weights=c(2, 0.2))
iii <- coords(roc = r2, x = "best", ret = c("threshold"), best.method = "youden", best.weights=c(10, 0.5))
iv <- coords(roc = r2, x = "best", ret = c("threshold"), best.method = "youden", best.weights=c(2, 0.2))
data.frame(cenário = c("i", "ii", "iii", "iv"), p = c(i[[1]], ii[[1]], iii[[1]], iv[[1]]))
m2 <- glm(Class ~ .,data = df, family = binomial(link='logit'))
summary(m2)
cbind(logOR = coef(m1), confint(m1),OR = exp(coef(m1)), exp(confint(m1))) #na escala do preditor e da resposta, respectivamente
p_resp <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response", se.fit = TRUE) #predição na escala da resposta (probabilidade, inversa do link = logit)
p_resp$fit
new_predict_preditor <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4)) #predição na escala do preditor
new_predict_preditor %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
new_predict_preditor <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4))
new_predict_preditor$fit
new_predict_preditor <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4))
new_predict_preditor
new_predict_preditor <- predict(m2, newdata = data.frame(CT = 5, MA = 3, BC = 4))
new_predict_preditor
?predict.lm
new_predict_preditor <- predict(m2, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response")
new_predict_preditor$fit #%>%
new_predict_preditor <- predict(m2, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response")
new_predict_preditor #%>%
#kbl() %>%
#kable_material_dark(c("striped", "hover"))
m2 <- glm(Class ~ .,data = df, family = binomial(link='logit'))
summary(m2)
# Armazenando os coeficientes encontrados
# Escala *escala do preditor* (i.e., da *log-odds*)
CT_estimate_m1 <- as.character(round(m1$coefficients[2],3))
MA_estimate_m1 <- as.character(round(m1$coefficients[3],3))
BC_estimate_m1 <- as.character(round(m1$coefficients[4],3))
# Escala da probabilidade das respostas
CT_estimate_m1_exp <- as.character(round(exp(m1$coefficients[2]),3))
MA_estimate_m1_exp <- as.character(round(exp(m1$coefficients[3]),3))
BC_estimate_m1_exp <- as.character(round(exp(m1$coefficients[4]),3))
new_predict_preditor <- predict(m2, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "terms")
new_predict_preditor
new_predict_preditor <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "terms")
new_predict_preditor
new_predict_preditor <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "terms")
new_predict_preditor
new_predict_preditor <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "terms")
str(new_predict_preditor)
new_predict_preditor <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "terms")
a = 1
a
new_predict_preditor <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "terms")
a = 1
print(a)
knitr::opts_chunk$set(echo = TRUE, fig.width=12, fig.height=8)
setwd("C:/Users/Avell/Google Drive/Luiz Gabriel - PC/13.Pós Data Science UFPR/03.Modelos_Estatisticos/Modulo_03/Projeto")
suppressMessages(library(tidyverse))
suppressMessages(library(summarytools))
suppressMessages(library(corrplot))
suppressMessages(library(car))
suppressMessages(library(GGally))
suppressMessages(library(effects))
suppressMessages(library(performance))
suppressMessages(library(gridExtra))
suppressMessages(library(caret))
suppressMessages(library(gamlss))
suppressMessages(library(kableExtra))
suppressMessages(library(pROC))
df <- read.table("breast.csv", header = T, sep = ";")
str(df)
summary(df)
bp1 <- ggplot(data = df, aes(x = "CT", y = CT)) +
geom_boxplot(width = .3, outlier.colour = "red", fill="grey70")+
theme_classic(base_size = 16)
bp2 <- ggplot(data = df, aes(x = "MA", y = MA)) +
geom_boxplot(width = .3, outlier.colour = "red", fill="grey70")+
theme_classic(base_size = 16)
bp3 <- ggplot(data = df, aes(x = "BC", y = BC)) +
geom_boxplot(width = .3, outlier.colour = "red", fill="grey70") +
theme_classic(base_size = 16)
# Organiza os gráfica um ao lado do outro
grid.arrange(bp1, bp2, bp3, ncol=3)
hg1 <- ggplot(df, aes(x=CT, fill=Class)) +
geom_histogram( color="white", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("steelblue3", "tomato")) +
theme_classic() +
labs(fill="")+
theme(legend.position="bottom")
hg2 <- ggplot(df, aes(x=MA, fill=Class)) +
geom_histogram( color="white", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("steelblue3", "tomato")) +
theme_classic() +
labs(fill="")+
theme(legend.position="bottom")
hg3 <- ggplot(df, aes(x=BC, fill=Class)) +
geom_histogram( color="white", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("steelblue3", "tomato")) +
theme_classic() +
labs(fill="") +
theme(legend.position="bottom")
# Organiza os gráfica um ao lado do outro
grid.arrange(hg1, hg2, hg3, ncol=3)
bp1 <- ggplot(data = df, aes(x = Class, y = CT, fill = Class)) +
geom_boxplot(width = .3, outlier.colour = "red", alpha=0.6)+
scale_fill_manual(values=c("steelblue3", "tomato"))+
theme_classic(base_size = 16)+
theme(legend.position="bottom")
bp2 <- ggplot(data = df, aes(x = Class, y = MA, fill = Class)) +
geom_boxplot(width = .3, outlier.colour = "red", alpha=0.6)+
scale_fill_manual(values=c("steelblue3", "tomato"))+
theme_classic(base_size = 16)+
theme(legend.position="bottom")
bp3 <- ggplot(data = df, aes(x = Class, y = BC, fill = Class)) +
geom_boxplot(width = .3, outlier.colour = "red", alpha=0.6)+
scale_fill_manual(values=c("steelblue3", "tomato"))+
theme_classic(base_size = 16)+
theme(legend.position="bottom")
# Organiza os gráfica um ao lado do outro
grid.arrange(bp1, bp2, bp3, ncol=3)
cor <-  cor(df[,-4])
corrplot(cor, method="color", type='lower', addCoef.col = "black")
# Transformação da variável texto para numérica
df <- df %>%
mutate(Class = case_when(Class == "benign" ~ 0,
Class != "benign" ~ 1))
set.seed(1909)
indice_treino = createDataPartition(y=df$Class, p=0.75, list=FALSE)
treino = df[indice_treino, ]
teste = df[-indice_treino, ]
# Fit do modelo com os dados de treino
m1 <- glm(Class ~ .,data = treino, family = binomial(link='logit'))
summary(m1)
# Armazenando os coeficientes encontrados
CT_estimate_m1 <- as.character(round(m1$coefficients[2],3))
MA_estimate_m1 <- as.character(round(m1$coefficients[3],3))
BC_estimate_m1 <- as.character(round(m1$coefficients[4],3))
CT_estimate_m1_exp <- as.character(round(exp(m1$coefficients[2]),3))
MA_estimate_m1_exp <- as.character(round(exp(m1$coefficients[3]),3))
BC_estimate_m1_exp <- as.character(round(exp(m1$coefficients[4]),3))
# Função para predict de diferentes threshoulds e treino/teste
pred_m1 <- function(p, tipo){
if (tipo == "treino"){
pred_treino_prob <- predict(m1, newdata = treino[,-4], type = 'response')
pred_treino <- ifelse(pred_treino_prob > p, 1, 0)
cfm_treino <- confusionMatrix(data=factor(pred_treino), reference = factor(treino[,4])) #mode = "prec_recall"
return(cfm_treino)
}
if (tipo == "teste"){
pred_teste_prob <- predict(m1, newdata = teste[,-4], type = 'response')
pred_teste <- ifelse(pred_teste_prob > p, 1, 0)
cfm_teste <- confusionMatrix(data=factor(pred_teste), reference = factor(teste[,4])) #mode = "prec_recall"
return(cfm_teste)
}
}
# Função para imprimir tabela estilizado no documento html
metrics_m1 <- function(p, tipo) {
metricas <- data.frame(Acurácia = round(pred_m1(p=p,tipo=tipo)$overall["Accuracy"],4),
Sensibilidade = round(pred_m1(p=p,tipo=tipo)$byClass["Sensitivity"],4),
Especificidade = round(pred_m1(p=p,tipo=tipo)$byClass["Specificity"],4),
row.names = NULL) %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
return(metricas)
}
metrics_m1(0.1,"treino")
metrics_m1(0.1,"teste")
metrics_m1(0.3,"treino")
metrics_m1(0.3,"teste")
metrics_m1(0.5,"treino")
metrics_m1(0.5,"teste")
metrics_m1(0.7,"treino")
metrics_m1(0.7,"teste")
metrics_m1(0.9,"treino")
metrics_m1(0.9,"teste")
par(pty="s")
roc(treino[,4], fitted(m1), plot=TRUE, legacy.axes=TRUE, percent=TRUE,
xlab="% Falso Positivo (Especificidade)", ylab="% Verdadeiro Positivo (Sensibilidade)",
lwd=5, col="deepskyblue3", print.auc=TRUE)
#par(pty="s")
#roc(treino[,4], fitted(m1), plot=TRUE, legacy.axes=TRUE, percent=TRUE,
#    xlab="% Falso Positivo", ylab="% Verdadeiro Positivo",
#    lwd=5, col="deepskyblue3", print.auc=TRUE)
# SObreponto a curva de outra modelo para comparação
#plot.roc(treino[,4]^2, fitted(m1)^3, add=TRUE, percent=TRUE,
#lwd=1, col="green", print.auc=TRUE, print.auc.y=40)
#legend("bottomright", legend=c("m1","m2"), col=c("deepskyblue3","green"), lwd =4)
par(pty="m")
teste_pred <- predict(m1, newdata = teste[,-4], type = 'response')
r2 <- roc(teste$Class, teste_pred)
i <- coords(roc = r2, x = "best", ret = c("threshold"), best.method = "youden", best.weights=c(2, 0.5))
ii <- coords(roc = r2, x = "best", ret = c("threshold"), best.method = "youden", best.weights=c(2, 0.2))
iii <- coords(roc = r2, x = "best", ret = c("threshold"), best.method = "youden", best.weights=c(10, 0.5))
iv <- coords(roc = r2, x = "best", ret = c("threshold"), best.method = "youden", best.weights=c(2, 0.2))
cenarios_df <- data.frame(cenário = c("i", "ii", "iii", "iv"), p = c(i[[1]], ii[[1]], iii[[1]], iv[[1]]))
cenarios_df %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
m2 <- glm(Class ~ .,data = df, family = binomial(link='logit'))
summary(m2)
# Armazenando os coeficientes encontrados
# Escala *escala do preditor* (i.e., da *log-odds*)
CT_estimate_m1 <- as.character(round(m1$coefficients[2],3))
MA_estimate_m1 <- as.character(round(m1$coefficients[3],3))
BC_estimate_m1 <- as.character(round(m1$coefficients[4],3))
# Escala da probabilidade das respostas
CT_estimate_m1_exp <- as.character(round(exp(m1$coefficients[2]),3))
MA_estimate_m1_exp <- as.character(round(exp(m1$coefficients[3]),3))
BC_estimate_m1_exp <- as.character(round(exp(m1$coefficients[4]),3))
conf_int_tb <- cbind(logOR = coef(m1), confint(m1),OR = exp(coef(m1)), exp(confint(m1))) #na escala do preditor e da resposta, respectivamente
conf_int_tb %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
new_predict_preditor <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "terms")
new_predict_preditor
new_predict_preditor <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4))
new_predict_preditor
new_predict_preditor <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4))
new_predict_preditor
exp(new_predict_preditor)
new_predict_preditor <- predict(m2, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response")
new_predict_preditor #%>%
#kbl() %>%
#kable_material_dark(c("striped", "hover"))
new_predict_resposta <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response") #predição na escala da resposta (probabilidade, inversa do link = logit)
new_predict_resposta$fit %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
new_predict_resposta <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response") #predição na escala da resposta (probabilidade, inversa do link = logit)
new_predict_resposta %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
new_predict_resposta <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response", se.fit = TRUE) #predição na escala da resposta (probabilidade, inversa do link = logit)
new_predict_resposta %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
new_predict_resposta <- predict(m1, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response") #predição na escala da resposta (probabilidade, inversa do link = logit)
new_predict_resposta %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
new_predict_preditor <- predict(m2, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response")
new_predict_preditor %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
new_predict_preditor <- predict(m2, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response")
new_predict_preditor %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
new_predict_resposta <- predict(m2, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response") #predição na escala da resposta (probabilidade, inversa do link = logit)
new_predict_resposta %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
new_predict_preditor <- predict(m2, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response")
exp(new_predict_preditor) %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
m2$coefficients
m2 <- glm(Class ~ .,data = df, family = binomial(link='logit'))
summary(m2)
# Armazenando os coeficientes encontrados
# Escala *escala do preditor* (i.e., da *log-odds*)
CT_estimate_m2 <- as.character(round(m2$coefficients[2],3))
MA_estimate_m2 <- as.character(round(m2$coefficients[3],3))
BC_estimate_m2 <- as.character(round(m2$coefficients[4],3))
df_estimate_m2 <- data.frame(CT_estimate_m2, MA_estimate_m2, BC_estimate_m2)
df_estimate_m2
# Escala da probabilidade das respostas
CT_estimate_m2_exp <- as.character(round(exp(m2$coefficients[2]),3))
MA_estimate_m2_exp <- as.character(round(exp(m2$coefficients[3]),3))
BC_estimate_m2_exp <- as.character(round(exp(m2$coefficients[4]),3))
m2 <- glm(Class ~ .,data = df, family = binomial(link='logit'))
summary(m2)
# Armazenando os coeficientes encontrados
# Escala *escala do preditor* (i.e., da *log-odds*)
CT_estimate_m2 <- as.character(round(m2$coefficients[2],3))
MA_estimate_m2 <- as.character(round(m2$coefficients[3],3))
BC_estimate_m2 <- as.character(round(m2$coefficients[4],3))
df_estimate_m2 <- data.frame("CT"=CT_estimate_m2, "MA"=MA_estimate_m2, "BC"=BC_estimate_m2)
df_estimate_m2
# Escala da probabilidade das respostas
CT_estimate_m2_exp <- as.character(round(exp(m2$coefficients[2]),3))
MA_estimate_m2_exp <- as.character(round(exp(m2$coefficients[3]),3))
BC_estimate_m2_exp <- as.character(round(exp(m2$coefficients[4]),3))
popover_dt <- data.frame(
position = c("top", "bottom", "right", "left"),
stringsAsFactors = FALSE
)
popover_dt$`Hover over these items` <- cell_spec(
paste("Message on", popover_dt$position), # Cell texts
popover = spec_popover(
content = popover_dt$position,
title = "NULL aqy",                           # title will add a Title Panel on top
position = popover_dt$position
))
kbl(popover_dt, escape = FALSE) %>%
kable_paper("striped", full_width = FALSE)
plot(allEffects(m6), type = "response")
library(readxl)
library(statmod)
library(pROC)
library(Epi)
library(car)
library(hnp)
library(rmarkdown)
library(dplyr)
library(corrplot)
library(effects)
#tb <- read_excel("C:/Users/Avell/Google Drive/Luiz Gabriel - PC/13.Pós Data Science UFPR/03.Modelos_Estatisticos/Modulo_03/Projeto/breast.xlsx")
tb <- read.table("C:/Users/Avell/Google Drive/Luiz Gabriel - PC/13.Pós Data Science UFPR/03.Modelos_Estatisticos/Modulo_03/Projeto/breast.csv", header = T, sep = ";")
str(tb)
rmarkdown::paged_table(tb)
tb$Class <- as.factor(x = tb$Class) # definindo a variável resposta como fator
str(tb)
contrasts(tb$Class)
summary(tb)
sapply(tb,function(x) sum(is.na(x))) # verificando se tem valores missing
round(prop.table(table(tb$Class)),2) # proporção de nódulos malignos e benignos
par(mfrow=c(1,3))
boxplot(CT~Class, data = tb, col = c('green', 'red'))
boxplot(MA~Class, data = tb, col = c('green', 'red'))
boxplot(BC~Class, data = tb, col = c('green', 'red'))
layout(1)
tb_sel <- tb %>%
select(CT, MA, BC)
plot(allEffects(m6), type = "response")
plot(allEffects(m6), type = "response")
library(readxl)
library(statmod)
library(pROC)
library(Epi)
library(car)
library(hnp)
library(rmarkdown)
library(dplyr)
library(corrplot)
library(effects)
#tb <- read_excel("C:/Users/Avell/Google Drive/Luiz Gabriel - PC/13.Pós Data Science UFPR/03.Modelos_Estatisticos/Modulo_03/Projeto/breast.xlsx")
tb <- read.table("C:/Users/Avell/Google Drive/Luiz Gabriel - PC/13.Pós Data Science UFPR/03.Modelos_Estatisticos/Modulo_03/Projeto/breast.csv", header = T, sep = ";")
str(tb)
rmarkdown::paged_table(tb)
tb$Class <- as.factor(x = tb$Class) # definindo a variável resposta como fator
str(tb)
contrasts(tb$Class)
summary(tb)
sapply(tb,function(x) sum(is.na(x))) # verificando se tem valores missing
round(prop.table(table(tb$Class)),2) # proporção de nódulos malignos e benignos
par(mfrow=c(1,3))
boxplot(CT~Class, data = tb, col = c('green', 'red'))
boxplot(MA~Class, data = tb, col = c('green', 'red'))
boxplot(BC~Class, data = tb, col = c('green', 'red'))
layout(1)
tb_sel <- tb %>%
select(CT, MA, BC)
library(readxl)
library(statmod)
library(pROC)
library(Epi)
library(car)
library(hnp)
library(rmarkdown)
library(dplyr)
library(corrplot)
library(effects)
#tb <- read_excel("C:/Users/Avell/Google Drive/Luiz Gabriel - PC/13.Pós Data Science UFPR/03.Modelos_Estatisticos/Modulo_03/Projeto/breast.xlsx")
tb <- read.table("C:/Users/Avell/Google Drive/Luiz Gabriel - PC/13.Pós Data Science UFPR/03.Modelos_Estatisticos/Modulo_03/Projeto/breast.csv", header = T, sep = ";")
str(tb)
rmarkdown::paged_table(tb)
tb$Class <- as.factor(x = tb$Class) # definindo a variável resposta como fator
str(tb)
contrasts(tb$Class)
summary(tb)
sapply(tb,function(x) sum(is.na(x))) # verificando se tem valores missing
round(prop.table(table(tb$Class)),2) # proporção de nódulos malignos e benignos
par(mfrow=c(1,3))
boxplot(CT~Class, data = tb, col = c('green', 'red'))
boxplot(MA~Class, data = tb, col = c('green', 'red'))
boxplot(BC~Class, data = tb, col = c('green', 'red'))
layout(1)
tb_sel <- tb %>%
select(CT, MA, BC)
plot(allEffects(m6), type = "response")
m2 <- glm(Class ~ .,data = df, family = binomial(link='logit'))
summary(m2)
# Armazenando os coeficientes encontrados
# Escala *escala do preditor* (i.e., da *log-odds*)
CT_estimate_m2 <- as.character(round(m2$coefficients[2],3))
MA_estimate_m2 <- as.character(round(m2$coefficients[3],3))
BC_estimate_m2 <- as.character(round(m2$coefficients[4],3))
df_estimate_m2 <- data.frame("CT"=CT_estimate_m2, "MA"=MA_estimate_m2, "BC"=BC_estimate_m2)
# Escala da probabilidade das respostas
CT_estimate_m2_exp <- as.character(round(exp(m2$coefficients[2]),3))
MA_estimate_m2_exp <- as.character(round(exp(m2$coefficients[3]),3))
BC_estimate_m2_exp <- as.character(round(exp(m2$coefficients[4]),3))
df_estimate_m2_exp <- data.frame("CT"=CT_estimate_m2_exp, "MA"=MA_estimate_m2_exp, "BC"=BC_estimate_m2_exp)
df_estimate_m2_exp %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
new_predict_preditor <- predict(m2, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response")
new_predict_preditor %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
new_predict_resposta <- predict(m2, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response") #predição na escala da resposta (probabilidade, inversa do link = logit)
exp(new_predict_resposta) %>%
kbl() %>%
kable_material_dark(c("striped", "hover", "responsive"))
new_predict_preditor <- predict(m2, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "terms")
new_predict_preditor %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
new_predict_preditor <- predict(m2, newdata = data.frame(CT = 5, MA = 3, BC = 4))
new_predict_preditor %>%
kbl() %>%
kable_material_dark(c("striped", "hover"))
new_predict_resposta <- predict(m2, newdata = data.frame(CT = 5, MA = 3, BC = 4), type = "response") #predição na escala da resposta (probabilidade, inversa do link = logit)
new_predict_resposta %>%
kbl() %>%
kable_material_dark(c("striped", "hover", "responsive"))
?glm.lm
?glm
